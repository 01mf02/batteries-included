

# Makefile for OCaml Batteries Included
#
# Copyright (C) 2008 David Teller, LIFO, Universite d'Orleans
# 
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2.1 of the License, or (at your option) any later version,
# with the special exception on linking described in file LICENSE.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA


########################################################################
# ENVIRONMENT CONFIGURATION
#
# Variables in this section control the overall behavior of the build
# script.
########################################################################

VERSION = @VERSION@
PACKAGE = batteries

OCAMLFIND = @OCAMLFIND@
HAS_GODI = @HAS_GODI@
BUILD_RUNNER = @BUILD_RUNNER@

prefix = @prefix@
datarootdir= @datarootdir@
datadir= @datadir@

BUILD_DOC=@BUILD_DOC@

# place where your on-line help files are stored
# if you want on-line help, you will need to invoke make as
#   make DOCDIR="/some/where/"
# Typical value: "/usr/share/doc/ocaml-batteries-included" (Debian)
# Typical value: "/usr/local/godi/doc/godi-batteries/doc/batteries" (GODI)

ifeq ($(HAS_GODI),yes)
DOCDIR = $(shell ocamlfind printconf destdir)/../../../doc/godi-batteries
else
DOCDIR = @DOCDIR@
endif

# command used to trigger the browser
# if your platform browser is different, you will need to invoke make as
#      make BROWSER="some command"
# Typical value: "x-www-browser %S &> /dev/null &" (for Debian/Ubuntu systems)
# Typical value: "htmlview %S &> /dev/null &"      (for Fedora/Red Hat)
# Typical value: "start %S /B"                     (for Windows)
# Typical value: "gnome-open %S &> /dev/null &"    (for Gnome)
BROWSER = @BROWSER_COMMAND@

#Flags to pass to OCamlBuild.
#Typical flag: -byte-plugin (if you don't have ocamlopt)
#Typical flag: -classic-display (for more details on the build process)
OBFLAGS =

ifeq ($(TERM),dumb)
OBFLAGS += -classic-display
endif

# The Makefile can be invoked as "JOBS=<n> make <target>", and the
# process count <n> will be passed along to ocamlbuild for use on
# multicore boxes.
ifdef JOBS
OBFLAGS += -j $(JOBS)
endif

OCAMLBUILD=@OCAMLBUILD@ $(OBFLAGS)
#OCAMLBUILD=ocamlbuild -byte-plugin -classic-display 
# Replace the first one with the second one if you have build-time
# issue, to help with trouble-shooting


# findlib destdir, if you need to install in non-standard places invoke make as
#      make install DESTDIR=/some/where/
DESTDIR = @DESTDIR@


########################################################################
# TARGET SET DEFINITIONS
#
# The following variables define the primary sets of objects that
# ocamlbuild will be instructed to create.
########################################################################

BYTE_TARGETS = src/main/threads/batteries.cma src/main/threads/run.byte \
		src/main/nothreads/batteries.cma src/main/nothreads/run.byte

#ifeq ($(BUILD_RUNNER),yes)
OPT_TARGETS = src/main/threads/batteries.cmxa src/main/threads/run.native \
	src/main/nothreads/batteries.cmxa src/main/nothreads/run.native
#else
#OPT_TARGETS = src/main/threads/batteries.cmxa src/main/nothreads/batteries.cmxa
#endif

SYNTAX_TARGETS = src/syntax/pa_openin/pa_openin.cmo \
	  src/syntax/pa_openin/pa_openin_r.cmo \
	  src/syntax/pa_where/pa_where.cmo \
	  src/syntax/pa_batteries/pa_batteries.cmo \
	  src/syntax/pa_strings/pa_strings.cma \
     src/syntax/pa_comprehension/pa_comprehension.cmo

TOPLEVEL_TARGETS = src/batteries_toolchain/toplevel.top \
                src/batteries_toolchain/batteries_print.cmo \
		src/batteries_toolchain/batteries_help.cmo


########################################################################
# MAKE RULES
########################################################################

ifeq ($(BUILD_DOC),yes)
all: config.ml install-doc
	$(OCAMLBUILD) $(BYTE_TARGETS) $(SYNTAX_TARGETS) $(TOPLEVEL_TARGETS)
#all: byte syntax top install-doc
else
all: config.ml
	$(OCAMLBUILD) $(BYTE_TARGETS) $(SYNTAX_TARGETS) $(TOPLEVEL_TARGETS)
#all: byte syntax top
endif

all_code:
	$(OCAMLBUILD) $(BYTE_TARGETS) $(OPT_TARGETS) $(TOPLEVEL_TARGETS) $(SYNTAX_TARGETS)

all_byte_code:
	$(OCAMLBUILD) $(BYTE_TARGETS) $(TOPLEVEL_TARGETS) $(SYNTAX_TARGETS)


ifeq ($(DESTDIR),)
DESTDIR_FLAGS =
else
DESTDIR_FLAGS = -destdir $(DESTDIR)
install: install-mkdir
install-mkdir:
	test -d $(DESTDIR) || mkdir -p $(DESTDIR)
endif

#DEST_TOP = 
#ifeq ($(DESTDIR),)
#ocamlfind install batteries
#DEST_TOP = $(shell @OCAMLFIND@ query @OCAMLPKG_camomile@ )/../batteries/top.ml
#else
#DEST_TOP = $(DESTDIR)/batteries/top.ml
#endif


config.ml: Makefile
	@\rm -f config.ml &&\
	echo 'let version = "$(VERSION)";;' >> config.ml &&\
	echo 'let documentation_root = "$(DOCDIR)";;' >> config.ml &&\
	echo 'let (browser: (_, _, _) format) = "$(BROWSER)";;' >> config.ml


#Useful for testing
reinstall: test_all_code
test_all_code: install_all_code
	$(MAKE) tests
install_all_code: all_code uninstall
	$(MAKE) install

rebyte: test_byte_code
test_byte_code: install_byte_code
	$(MAKE) tests_byte
install_byte_code: all_byte_code uninstall
	$(MAKE) install

install-doc: doc
	install -d $(DOCDIR) &&\
	cp -R doc/batteries/* $(DOCDIR)

byte: config.ml
	$(OCAMLBUILD) $(BYTE_TARGETS)

opt: config.ml
	$(OCAMLBUILD) $(OPT_TARGETS)

syntax: config.ml
	$(OCAMLBUILD) $(SYNTAX_TARGETS)

top: config.ml
	$(OCAMLBUILD) $(TOPLEVEL_TARGETS)

install: uninstall
	chmod ugo+rx src/batteries_toolchain/ocaml* && \
	ocamlfind install $(DESTDIR_FLAGS) batteries \
		build/META \
		_build/src/core/extlib/IO.cmi \
		_build/src/core/extlib/innerIO.cmi \
		_build/src/core/extlib.cmi \
		_build/src/core/batteries_config.cmi \
		_build/src/syntax/pa_openin/pa_openin.cmo \
		_build/src/syntax/pa_openin/pa_openin_r.cmo \
		_build/src/syntax/pa_where/pa_where.cmo \
		_build/src/syntax/pa_comprehension/pa_comprehension.cmo \
		_build/src/syntax/pa_batteries/pa_batteries.cmo \
		_build/src/syntax/pa_strings/pa_strings.cma \
		-optional \
			_build/src/batteries_toolchain/batteries_help.cmi \
			_build/src/batteries_toolchain/batteries_print.cmi \
			_build/src/batteries_toolchain/batteries_help.cmo \
			_build/src/batteries_toolchain/batteries_print.cmo \
			_build/src/batteries_toolchain/toplevel.top \
			src/batteries_toolchain/top.ml \
			src/batteries_toolchain/ocaml  \
			src/batteries_toolchain/ocamlbuild  \
			src/batteries_toolchain/ocamlc    \
			src/batteries_toolchain/ocamlopt  \
			src/batteries_toolchain/ocamlcp   \
			src/batteries_toolchain/ocamldep
	ocamlfind install $(DESTDIR_FLAGS) batteries_threads \
		build/threaded/META \
		_build/src/main/threads/batteries.cmi \
		_build/src/main/threads/run.byte \
		-optional _build/src/main/threads/batteries.cma \
			_build/src/main/threads/batteries.cmxa  \
			_build/src/main/threads/batteries.a     \
			_build/src/main/threads/run.native
	ocamlfind install $(DESTDIR_FLAGS) batteries_nothreads \
		build/nothreads/META \
		_build/src/main/nothreads/batteries.cmi \
		_build/src/main/nothreads/run.byte \
		-optional _build/src/main/nothreads/batteries.cma \
			_build/src/main/nothreads/batteries.cmxa  \
			_build/src/main/nothreads/batteries.a     \
			_build/src/main/nothreads/run.native
uninstall:
	\rm -Rf $(DOCDIR) &&\
	ocamlfind remove $(DESTDIR_FLAGS) batteries &&\
	ocamlfind remove $(DESTDIR_FLAGS) batteries_threads &&\
	ocamlfind remove $(DESTDIR_FLAGS) batteries_nothreads

quickdoc: quickbyte doc/api.odocl
	rm -Rf doc/batteries/html/api
	$(OCAMLBUILD) -I src/main/threads doc/api.docdir/index.html
	rm -f api.docdir
	cp -RpP _build/doc/api.docdir/ doc/batteries/html/api

quickbyte: config.ml
	$(OCAMLBUILD) src/main/threads/batteries.cma 

doc: byte doc/api.odocl
	rm -Rf doc/batteries/html/api
	$(OCAMLBUILD) -I src/main/threads doc/api.docdir/index.html
	rm -f api.docdir
	cp -RpP _build/doc/api.docdir/ doc/batteries/html/api

doc/api.odocl: 
	@echo Generating documentation. This usually lasts 15+ minutes.
	@echo You should go and take some coffee.
	cp src/main/threads/batteries.mllib doc/api.odocl

examples:
	@echo Note: to build the examples, you must first have installed Batteries
	@echo If you haven\'t installed Batteries yet, please use    make all opt install
	cd examples/tools && ocamlfind batteries/ocamlbuild tools.otarget && \
	cd ../snippets    && ocamlfind batteries/ocamlbuild snippets.otarget

tests:
	cd testsuite && ocamlbuild -clean && \
	ocamlfind batteries/ocamlbuild main.byte main.native &&\
	ocamlfind batteries/ocamlbuild main_threads.native

tests_byte:
	cd testsuite && ocamlfind batteries/ocamlbuild -clean && \
	ocamlfind batteries/ocamlbuild main.byte &&\
	ocamlfind batteries/ocamlbuild main_threads.byte

run_tests: tests run_tests_native run_tests_byte run_tests_interp run_tests_native_threads run_tests_byte_threads run_tests_interp_threads


run_tests_byte:
	cd testsuite && ./main.byte

run_tests_native:
	cd testsuite && ./main.native

run_tests_interp:
	cd testsuite && ocamlfind -I . batteries/ocaml main.ml

#Experiments with documentation
XPDOC_CORE_EXTLIB_MLI=concurrent interfaces innerIO monad return enum extBigarray extUChar extUnit global number ref vect pMap pSet multiPMap option extBuffer extString extUTF8 extInt64 extInt32 extInt extHashtbl extFloat extChar dynArray dllist bitSet rope IO extPrintf base64 extArray extBig_int extList extNativeint extStream substring std refList lazyList extRandom extNum extBool file optParse parserCo result charParser uCharParser extGenlex extComplex extMarshal extGc extPrintexc extPervasives extUnix extMap extQueue extStack extSet extOo extStr path charEncodings extSys extArg extDigest logger extFormat extScanf print
XPDOC=$(patsubst %, _build/src/core/extlib/%.mli, $(XPDOC_CORE_EXTLIB_MLI)) _build/src/core/extlib.mli

xpdoc:
#	 time ocamlfind ocamldoc -package stdlib,sexplib,netstring,camomile -i _build/build -g odoc_batteries_factored.cmo -g odoc_extract_mli.cmo -I _build/build/ -I _build -I _build/src/core/ -I _build/src/core/extlib -I _build/src/core/baselib_threads -I _build/src/libs/ -I _build/src/core/baselib  $(XPDOC) src/main/threads/batteries.ml
	 time ocamldoc -i _build/build  -g odoc_extract_mli.cmo -I /home/yoric/tmp/godi-311/lib/ocaml/pkg-lib/sexplib/ -I /home/yoric/tmp/godi-311/lib/ocaml/pkg-lib/camomile/ -I _build/build/ -I _build -I _build/src/core/ -I _build/src/core/extlib -I _build/src/core/baselib_threads -I _build/src/libs/ -I _build/src/core/baselib  $(XPDOC) -pp _build/build/optcomp/optcomp_o.byte src/main/threads/batteries.ml


clean:
	$(OCAMLBUILD) -clean
	cd examples && $(OCAMLBUILD) -clean
	rm -f `find . -name "*~" -o -name "*#" -o -name "*odoc"`
	rm -f META doc/api.odocl doc/batteries/html/api/*
	rm -f src/batteries_toolchain/ocaml

.PHONY: doc/api.odocl batteries.mllib examples tests
