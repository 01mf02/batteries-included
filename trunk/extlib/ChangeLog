08/31/2008 David Teller <David.Teller@univ-orleans.fr>:
	* ref.ml?: [swap] added
	
08/30/2008 David Teller <David.Teller@univ-orleans.fr>:
	* extList.mli: documented
	* extList.ml?: [remove] changed from ['a -> 'a list -> 'a list] to ['a list -> 'a -> 'a list]
	* extList.ml?: [remove_all] changed from ['a -> 'a list -> 'a list] to ['a list -> 'a -> 'a list]
	
08/28/2008 David Teller <David.Teller@univ-orleans.fr>:
	* IO.ml?: [stdnull] created
	* IO.ml: [Printf.mkprintf] replaces [Printf.printf]
	* IO.ml: [printf] defined from [Printf.mkprintf]
	* IO.ml?: [output_buffer] added
	* IO.ml?: [fprintf], [sprintf], [eprintf], [ifprintf],
	[bprintf], [k*printf] added

08/27/2008 David Teller <David.Teller@univ-orleans.fr>:
	* parserCo.ml: entirely rewritten
	* extGenlex.ml: [ident_or_kwd], [ident], [kwd], [identifier], [keyword] adjusted priority of [label]
	* extGenlex.ml: [line_comment] and [multiline_comment] lose their label
	* parserCo.ml: [none_of] now negates [for_all]
	* IO.ml: [chars_of] now uses [nread]
	* IO.ml?: [tab_out] created
	
08/26/2008 David Teller <David.Teller@univ-orleans.fr>:
	* extGenlex.ml?: [feed] added
	* parserCo.ml?: [ignore_zero_plus], [ignore_one_plus] added
	* extGenlex.ml: [ignore_zero_plus], [ignore_one_plus] replace [zero_plus] and [one_plus]
	                when these are unnecessary
	* extString.ml?: [compare_without_case] added
	* extChar.ml?: [is_latin1] added
	* charParser.ml?: [latin1] added
	* charParser.ml?: [letter] added

08/25/2008 David Teller <David.Teller@univ-orleans.fr>:
	* charParser.ml?: [advance]  created
	* charParser.ml?: [position] created
	* charParser.ml?: [source_of_enum], [source_of_string] created
	* extGenlex.ml?: adapted to new [ParserCo]
	* extGenlex.ml: [is_reserved] added

08/25/2008 David Teller <David.Teller@univ-orleans.fr>:
	* IO.ml: [enum_char_size] created
	* IO.ml: [enum_char] now uses [enum_char_size] and [input]
	* IO.ml?: [enum_*] renamed [*_of]
	* parserCo.ml?: [Source.t] redefined
	* parserCo.ml?: [Source.of_lexer] added
	* parserCo.ml?: [Source.set_*] added

08/24/2008 David Teller <David.Teller@univ-orleans.fr>:
	* enum.ml?: [comb] renamed [combine]
	* enum.ml?: [split] renamed [uncombine]
	* lazyList.ml?: [uncombine] added
	* parserCo.ml?: fully rewritten
	* parserCo.ml?: module [Source] added
	* extGenlex.ml?: [as_parser] now returns [loc]
	* extGenlex.ml: in [multiline_comment], introduced [l0] and [r0]
	* extGenlex.ml: in [multiline_comment], [either] block now doesn't use [>>>]
	* extGenlex.ml: in [line_comment], removed [>>>]
	* extGenlex.ml: in [line_comment], using [s] instead of "//"
	* extGenlex.ml: in [multiline_comment], added [string l >>>] at start of comment
	* extGenlex.ml: [symbol] removed
	* extGenlex.ml: [as_parser] now merged [any_identifier]/[any_operator] and
	                [any_reserved]/[any_reserved_op]
	* extGenlex.ml: [C.op_letter] now equals to [C.op_start]
	* charParser.ml?: changed type of [parse_string]
	
08/22/2008 David Teller <David.Teller@univ-orleans.fr>:
	* parserCo.ml?: [run_list] renamed [to_list_filter]
	* parserCo.ml?: [run_enum] renamed [to_enum_filter]
	* parserCo.ml?: [compose] created
	
07/01/2008 David Teller <David.Teller@univ-orleans.fr>:
	* extList.ml?: [make_compare] created
	* labels.ml?: created
	* pSet.ml?: created
	* multiPMap.ml?: created
	* enum.ml?: [for_all] created
	* enum.ml?: [exists] created
	* enumLabels.ml?: [for_all] created
	* enumLabels.ml?: [exists] created
	
06/04/2008 David Teller <David.Teller@univ-orleans.fr>:
	* extList.ml?: [assoc_inv] created
	
06/03/2008 David Teller <David.Teller@univ-orleans.fr>:
	* optionLabels.ml?: created
	
05/26/2008 David Teller <David.Teller@univ-orleans.fr>:
	* file.ml?: created
	* IO.ml?: [file_*] removed
	* extStream.ml: pre-processed with camlp4o
	* extStream.mli: [of_fun] removed
	* extStream.mli: documented
	* extStream.ml?: [to_channel] renamed [on_channel]
	* extStream.ml?: [to_output] renamed [on_output]
	* enum.ml?: [scanl] added
	* enum.ml?: [scan] added
	* enum.ml: in [take_while], [next] is not recursive anymore
	* enum.ml: [take_while] now pushes back first erroneous element.
	* enum.ml: [before_do] removed
	* enum.ml?: [prefix_action] added
	* enum.ml?: [suffix_action] added
	* enum.ml: [drop_while] now uses [prefix_action]
	* enum.ml?: [span] added
	* enum.ml?: [comb] added
	* enum.ml?: [split] added
	* enum.ml?: [take] added
	
05/24/2008 David Teller <David.Teller@univ-orleans.fr>:
	* extList.ml?: [backwrads], [of_backwards] created
	* IO.ml?: [stdin], [stdout], [stderr] created
	* IO.ml: [Printf] created
	* IO.mli: type of [printf] changed to accomodate "%a"
	* IO.ml: [printf] now uses [Printf.mkprintf]
	* IO.ml?: [comb] created
	
	
05/21/2008 David Teller <David.Teller@univ-orleans.fr>:
	* extString.ml?: [is_empty] added
	* extList.ml?: [ListLabels] created
	
05/19/2008 David Teller <David.Teller@univ-orleans.fr>:
	* extGenlex.ml?: [Make.lazy_list_filter] added
	* extGenlex.ml?: [Make.stream_filter] added
	* extGenlex.ml?: [Make.enum_filter] added
	* extGenlex.ml?: [Make.as_parser] added
	* parserCo.ml?: [run_filter] added
	* parserCo.ml?: [run_filter_list] added
	* parserCo.ml?:  [run] now accepts label [?newline]
	* parserCo.ml: in [one_plus], removed one separator prefix
	* charParser.ml: [parse_string] now applies label to [run]
	* charParser.mli: [parse_string] now returns variant
	* enum.ml?: [seq_hide] renamed [unfold]
	* enumLabels.ml?: [seq_hide] renamed [unfold]
	* IO.ml?: [enum_char] added
	* IO.ml: [ExtString] opened

05/18/2008 David Teller <David.Teller@univ-orleans.fr>:
	* extGenlex.ml?: added [Languages], [Languages.Definition],
	    [Languages.OCaml], [Languages.C], [Languages.Make]
	* extGenlex.ml?: added [reserved], [reserved_op]
	* parserCo.ml?: [lookahead] added
	
05/18/2008 David Teller <David.Teller@univ-orleans.fr>:
	* extChar.mli: documentation added
	* extChar.ml: [is_letter] added
	* parserCo.ml?: [sat] added
	* parserCo.ml: in [one_plus], [sep] now doesn't have a default value
	* parserCo.ml: in [one_plus], last line reparenthesized
	* parserCo.ml: in [~*] and [~+] now have an explicit argument
	* charParser.ml: [whitespace] replaces [whitespaces]
	* lazyListLabels.ml?: [Exceptionless] replaces [ExceptionLess]
	* lazyList.ml?: [Exceptionless] replaces [ExceptionLess]
	* lazyListLabels.ml?: [seq_hide] renamed [unfold]
	* lazyList.ml?: [seq_hide] renamed [unfold]
	* enum.ml: [---] now returns decreasing range if y < x
	* lazyList.ml?: in [Exceptionless.split_at], [Std.result] removed
	* lazyList.ml?: in [Exceptionless.at], [Std.result] removed
	* lazyListLabels.ml?: in [Exceptionless.split_at], [Std.result] removed
	* lazyListLabels.ml?: in [Exceptionless.at], [Std.result] removed
	* extList.ml?: in [Exceptionless.split_at], [Std.result] removed
	* extList.ml?: in [Exceptionless.at], [Std.result] removed
	
05/17/2008 David Teller <David.Teller@univ-orleans.fr>:
	* charParser.mli: case_char, case_string added
	* charParser.mli: everything c/c++/ocaml-related removed
	* charParser.mli: not_oneof renamed none_of
	* parserCo.mli:   none_of
	* extGenlex.ml:   Language, LanguageDefinition, OCamlLanguage,
	                  CPPLanguage, Make created


	
05/16/2008 David Teller <David.Teller@univ-orleans.fr>:
	* parserCo.ml?: fail added
	* charParser.ml: ExtString opened
	* charParser.ml: float, integer rewritten
	* charParser.mli: first_identifier_char/later_identifier_char added
	* charParser.mli: in *_case, removed superfluous "_"
	* charParser.mli: string now takes a string
	* charParser.ml: string now returns its string
	* charParser.ml: whitespaces now returns unit
	* charParser.mli: digit now returns a char
	* charParser.ml: ocaml_symbol now returns a string
	* charParser.mli: _comment now returns unit
	* charParser.ml: ocaml_comment and ocaml_string now define content as a function
	* vect.ml: of_list, at added
	* std.mli: |>, @., |-, -|, //, pi_fst, pi_snd, curry, uncurry added
	* extString.ml: to_list, of_list added
	* charParser.ml?: parse_string added
	* charParser.ml: string now stops at len-1
	* charParser.ml: ocaml_escape rewritten with one any
	* charParser.ml?: one_plus, zero_plus rewritten with ?sep
	* parserCo.ml?: none_of added
05/15/2008 David Teller <David.Teller@univ-orleans.fr>:
	* lazyList.mli: peek added
	* lazyList.mli: get added
	* parserCo.ml?: scan added
	* charParser.ml?: created
	* parserCo.mli: run now accepts an additional argument nl
	* parserCo.ml: put_loc now returns l
	* parserCo.ml: run implemented
	* parserCo.mli: accept_* removed
	* parserCo.mli: >>= added
	* parserCo.mli: seq, >:: added
	* charParser.ml: ocaml_comment now returns unit
	* charParser.ml: ocaml_string now builds a list
	* charParser.ml: c_comment now returns unit
	* extString.mli: of_list/to_list added
	
05/14/2008 David Teller <David.Teller@univ-orleans.fr>:
	* parserCo.mli: operators ~+, ~*, ~?, ^^ added
	* parserCo.mli: renamed filter -> map
	* parserCo.mli: changed order of arguments of map
	* parserCo.ml: actual_loc added
	* parserCo.ml: failure added
	* parserCo.ml: Failure added
	* parserCo.ml: fail_at, fail_at_loc added
	* parserCo.ml: get_loc, put_loc added
	* parserCo.ml: source, t, satisfy, label, either, maybe, bind, eof,
	    any, return, filter, exactly, zero_plus, map, times, one_of,
	    range, discarding rewritten with exceptions
	* parserCo.ml: string rewritten without discarding
	* vect.mli: of_list added
	* vect.mli: at added
	* extChar.mli: is_* added
	
05/13/2008 David Teller <David.Teller@univ-orleans.fr>:
	* enum.ml: ~~ implemented
	* enum.ml?: --- added
	* enum.ml?: repaginated
	* enumLabels.*: brought up-to-date wrt enum.ml*
	
05/11/2008 David Teller <David.Teller@univ-orleans.fr>:
	* lazyList.ml: in of_enum, lazy moved outwards

05/09/2008 David Teller <David.Teller@univ-orleans.fr>:
	* enum.ml: empty now uses no_more_count
	* enum.ml: cycle now clones the enumeration before concatenating it
	* enum.ml: lsing now uses init 1 instead of init 0
	* option.ml?: of_option, to_option, bind, >>=
	
05/07/2008 David Teller <David.Teller@univ-orleans.fr>:
	* enum.ml: MicroLazyList added
	* enum.ml: from rewritten using MicroLazyList
	* lazyList.ml: enum now uses Enum.make instead of Enum.from

05/07/2008 David Teller <David.Teller@univ-orleans.fr>:
	* extList.ml?: is_empty, cons added
	* lazyList.ml?: is_empty, cons added
	* lazyList.ml?: would_at_fail added
	* lazyListLabels?: is_empty, cons, would_at_fail added
	* lazyList.ml: from_while now defines aux() rather than aux
	* lazyList.ml: in remove_all, inverted then and else branches
	* lazyList.ml: rev and rev_of_list now use fold_left rather than
	               fold_right
	* lazyList.ml?: remove_all_such added
	* lazyList.ml: remove_all now uses remove_all_such
	* lazyList.ml: drop_while now returns the rest rather than its tail
	* lazyList.ml?: from_loop_while renamed seq_hide
	* lazyList.ml?: seq added
	* lazyListLabels.ml: mapi added
	* lazyListLabels.ml?: updated wrt lazyList.ml?
	
05/05/2008 David Teller <David.Teller@univ-orleans.fr>:
	* parserCo.ml: in whitespaces, removed labels
	* parserCo.ml: ocaml_comment added
	* parserCo.ml: t.parser renamed t.parse
	* parserCo.ml: escape added
	* parserCo.ml: ocaml_char added
	* parserCo.ml: ocaml_string added
	* parserCo.ml: anyway added
	* parserCo.ml: newline added
	* parserCo.ml: int added
	* parserCo.ml: float added
	* parserCo.mli: in label, order of arguments changed
	* parserCo.ml: t is not a struct anymore
	* parserCo.ml?: eof added
	* parserCo.ml: <|> added
	* parserCo.ml: either added 
	* parserCo.ml: get_offset added
	* parserCo.ml: satisfy added
	* parserCo.ml: label added
	* extChar.ml?: is_newline added
	* extChar.ml: is_uppercase_latin1, is_lowercase_latin1 now use charcodes rather than literals
	* IO.ml: apply_enum added
	* IO.ml: enum_* now uses apply_enum
	* enumLabels.ml?: seq added
	* enumLabels.mli: seq_while added
	
05/02/2008 David Teller <David.Teller@univ-orleans.fr>:
	* uTF8.ml: replaced String.splice with ExtString.String.splice
	* enum.ml?: renamed from_while_loop into seq_hide
	* extList.ml?: renamed physical_index_of into index_ofq
	* extList.ml?: rindex_of, rindex_ofq added
	* extChar.ml: is_digit added
	* extChar.ml: is_uppercase, is_lowercase, is_uppercase_latin1, is_lowercase_latin1, is_symbol
	* parserCo.ml?: created
	
05/01/2008 David Teller <David.Teller@univ-orleans.fr>:
	* install.ml: added new modules
	* IO.ml: enum_* fixed by replacing enum_ with read_*
	* IO.ml?: open_file_* created
	* IO.ml?: write_bits_enum now accepts a label nbits
	* extList.ml?: index_of, physical_index_of added
	* extList.ml?: created module ExceptionLess
	* extList.mli: documentation
	* extList.ml?: split_at_exn renamed split_at
	* extList.ml?: in remove and remove_all, changed order of arguments
	* extList.ml?: takewhile renamed take_while
	* extList.ml?: dropwhile renamed drop_while
	* lazyList.ml?: init, make, find, rfind,  find_exn, 
	rfind_exn, findi, rfindi, index_of, index_ofq, last,
	first, memq, assoc, assq, split_at, split_nth
	added, remove_if, remove, remove_all, unique,
	drop_while, take_while, combine, for_all2, exists2,
	fold_left2, fold_right2, iter2, map2, sort, stable_sort,
	next, from_loop, from_loop_while, from_while added
	* lazyList.ml: may_find, may_rfind, may_findi, 
	may_rfindi, rev_of_list, rev_append_of_list added
	* lazyList.ml?: ExceptionLess added
	* result.ml?: catch added
	* option.ml?: get_exn added
	* enum.ml?: close, drop_while, take_while, from_loop,
	from_loop_while, from_while added
	* enum.ml: before_do added
	* extInt32.ml?: submodule Numeric added
	* extInt64.ml?: submodule Numeric added
	* extFloat.ml?: submodule Numeric added
	* extNativeint.ml?: submodule Numeric added
	* extBig_int.ml?: submodule Numeric added
	
04/30/2008 David Teller <David.Teller@univ-orleans.fr>:
	* ref.mli: created
	* ref.ml: created
	* rope.mli: imported
	* rope.ml: imported
	* vect.*: imported
	* enum.ml?: from_while added
	* extStream.mli: type 'a t is now Stream.t
	* extGenLex.ml: created
	* extGenLex.mli: created	
	* extString.ml?: filter_map created
	* extString.ml?: trim created
	* extRandom.ml?: created
	* number.ml: created
	* extInt.ml: created
	* extFloat.ml: created
	* extComplex.ml: created
	* extInt32.ml: created
	* extInt64.ml:created
	* extBig_int.ml: created
	* extNativeint.ml: created
	* IO.ml?: enum_* created
	* IO.ml?: write_*_num created
	
04/28/2008 David Teller <David.Teller@univ-orleans.fr>:
	* enum.mli: added slazy, lsing, lcons, lapp, ising, icons, iapp, switch, 
	            switchn, drop, seq, cycle, repeat
	* enum.ml: added slazy, lsing, lcons, lapp, ising, icons, iapp, switch, 
	            switchn, drop, seq, cycle, repeat
	* enum.mli: added Infinite_enum
	* enum.ml: added Infinite_enum
	* enum.mli: removed get_exn, peek_exn
	* enum.ml: rewritten range from seq
	* enumLabels.mli: as enum.mli
	* enumLabels.ml: now include enum.mli
	
04/27/2008 David Teller <David.Teller@univ-orleans.fr>:
	* enumLabels.mli: *_exc renamed *_exn
	* enumLabels.ml: implemented
	* enum.mli: *_exc renamed *_exn
	* enum.ml: *_exc renamed *_exn
	* lazyList.mli: of_fun renamed from
	* lazyListLabels.mli: created
	* lazyListLabels.ml: created
	* option.mli: enum added
	* option.ml: enum added
	* enum.ml?: range added
	* enum.ml?: -- added
	* extStream.mli: created
	* extStream.ml: created
	
04/24/2008 David Teller <David.Teller@univ-orleans.fr>:
	* enum.ml: new version of find implemented
	* enum.ml: peek_exc implemented
	* enum.ml: get_exc implemented
	* extList.mli: added split_at_exc
	* extList.mli: added at_exc
	* extList.ml: new version of split_at implemented
	* extList.ml: new version of at implemented
	* lazyList.ml: created
	* lazyList.mli: created

04/23/2008 David Teller <David.Teller@univ-orleans.fr>:
	* enum.mli: find renamed find_exc
	* enum.mli: added peek_exc
	* enum.mli: added get_exc
	* enum.mli: added singleton
	* enum.mli: added loop
	* enum.mli: added eternity
	* extList.mli: added split_at
	* extList.mli: added at
	* extList.ml: added split_at
	* extList.ml: added at
	* enumLabels.mli: created
	* enumLabels.ml:  created
	* genParser.mli: created
	* genLex2.mli: created
